//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct CreatePermission {
    /// The new permission
    pub permission: solana_program::pubkey::Pubkey,
    /// The delegatable account
    pub delegated_account: solana_program::pubkey::Pubkey,
    /// The group who has the permission
    pub group: solana_program::pubkey::Pubkey,
    /// The account paying for the rent
    pub payer: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreatePermission {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.permission,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.delegated_account,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.group, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = CreatePermissionInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MAGICBLOCK_PERMISSION_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct CreatePermissionInstructionData {
    discriminator: u8,
}

impl CreatePermissionInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 1 }
    }
}

/// Instruction builder for `CreatePermission`.
///
/// ### Accounts:
///
///   0. `[writable]` permission
///   1. `[signer]` delegated_account
///   2. `[]` group
///   3. `[writable, signer]` payer
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct CreatePermissionBuilder {
    permission: Option<solana_program::pubkey::Pubkey>,
    delegated_account: Option<solana_program::pubkey::Pubkey>,
    group: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreatePermissionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The new permission
    #[inline(always)]
    pub fn permission(&mut self, permission: solana_program::pubkey::Pubkey) -> &mut Self {
        self.permission = Some(permission);
        self
    }
    /// The delegatable account
    #[inline(always)]
    pub fn delegated_account(
        &mut self,
        delegated_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.delegated_account = Some(delegated_account);
        self
    }
    /// The group who has the permission
    #[inline(always)]
    pub fn group(&mut self, group: solana_program::pubkey::Pubkey) -> &mut Self {
        self.group = Some(group);
        self
    }
    /// The account paying for the rent
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreatePermission {
            permission: self.permission.expect("permission is not set"),
            delegated_account: self
                .delegated_account
                .expect("delegated_account is not set"),
            group: self.group.expect("group is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `create_permission` CPI accounts.
pub struct CreatePermissionCpiAccounts<'a, 'b> {
    /// The new permission
    pub permission: &'b solana_program::account_info::AccountInfo<'a>,
    /// The delegatable account
    pub delegated_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group who has the permission
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account paying for the rent
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_permission` CPI instruction.
pub struct CreatePermissionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The new permission
    pub permission: &'b solana_program::account_info::AccountInfo<'a>,
    /// The delegatable account
    pub delegated_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The group who has the permission
    pub group: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account paying for the rent
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CreatePermissionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreatePermissionCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            permission: accounts.permission,
            delegated_account: accounts.delegated_account,
            group: accounts.group,
            payer: accounts.payer,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.permission.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.delegated_account.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.group.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = CreatePermissionInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MAGICBLOCK_PERMISSION_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.permission.clone());
        account_infos.push(self.delegated_account.clone());
        account_infos.push(self.group.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreatePermission` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` permission
///   1. `[signer]` delegated_account
///   2. `[]` group
///   3. `[writable, signer]` payer
///   4. `[]` system_program
pub struct CreatePermissionCpiBuilder<'a, 'b> {
    instruction: Box<CreatePermissionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreatePermissionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreatePermissionCpiBuilderInstruction {
            __program: program,
            permission: None,
            delegated_account: None,
            group: None,
            payer: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The new permission
    #[inline(always)]
    pub fn permission(
        &mut self,
        permission: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.permission = Some(permission);
        self
    }
    /// The delegatable account
    #[inline(always)]
    pub fn delegated_account(
        &mut self,
        delegated_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.delegated_account = Some(delegated_account);
        self
    }
    /// The group who has the permission
    #[inline(always)]
    pub fn group(&mut self, group: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.group = Some(group);
        self
    }
    /// The account paying for the rent
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CreatePermissionCpi {
            __program: self.instruction.__program,

            permission: self.instruction.permission.expect("permission is not set"),

            delegated_account: self
                .instruction
                .delegated_account
                .expect("delegated_account is not set"),

            group: self.instruction.group.expect("group is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CreatePermissionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    permission: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    delegated_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
